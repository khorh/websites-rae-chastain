{"ast":null,"code":"var _jsxFileName = \"/Users/helenkhor/Documents/02 Projects/Rae Chastain/src/components/Text/Heading/Heading.tsx\";\nimport styles from \"./Heading.module.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Heading = props => {\n  if (props.type === \"h1\") {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: `${styles[props.font]}`,\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this);\n  } else if (props.type === \"h2\") {\n    return /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: `${styles[props.font]}`,\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this);\n  } // switch (props.type) {\n  //   case \"h1\":\n  //     return <h1 className={`${styles[props.font]}`}>{props.children}</h1>;\n  //   case \"h2\":\n  //     return <h2 className={`${styles[props.font]}`}>{props.children}</h2>;\n  // }\n\n};\n\n_c = Heading;\nexport default Heading;\n\nvar _c;\n\n$RefreshReg$(_c, \"Heading\");","map":{"version":3,"sources":["/Users/helenkhor/Documents/02 Projects/Rae Chastain/src/components/Text/Heading/Heading.tsx"],"names":["styles","Heading","props","type","font","children"],"mappings":";AACA,OAAOA,MAAP,MAAmB,uBAAnB;;;AAaA,MAAMC,OAAyB,GAAIC,KAAD,IAAgB;AAEhD,MAAIA,KAAK,CAACC,IAAN,KAAe,IAAnB,EAAyB;AACvB,wBACE;AAAI,MAAA,SAAS,EAAG,GAAEH,MAAM,CAACE,KAAK,CAACE,IAAP,CAAa,EAArC;AAAA,gBAAyCF,KAAK,CAACG;AAA/C;AAAA;AAAA;AAAA;AAAA,YADF;AAGD,GAJD,MAIO,IAAIH,KAAK,CAACC,IAAN,KAAe,IAAnB,EAAyB;AAC9B,wBAAQ;AAAI,MAAA,SAAS,EAAG,GAAEH,MAAM,CAACE,KAAK,CAACE,IAAP,CAAa,EAArC;AAAA,gBAAyCF,KAAK,CAACG;AAA/C;AAAA;AAAA;AAAA;AAAA,YAAR;AACD,GAR+C,CAShD;AACA;AACA;AACA;AACA;AACA;;AACD,CAfD;;KAAMJ,O;AAiBN,eAAeA,OAAf","sourcesContent":["import { FC } from \"react\";\nimport styles from \"./Heading.module.scss\";\n\nexport interface HeadingProps extends React.HTMLAttributes<HTMLHeadingElement> {\n  /**\n   * What is the type?\n   */\n  type: \"h1\" | \"h2\" | \"p\";\n  /**\n   * What is the font?\n   */\n  font: \"primary\" | \"secondary\";\n}\n\nconst Heading: FC<HeadingProps> = (props: any) => {\n\n  if (props.type === \"h1\") {\n    return (\n      <h1 className={`${styles[props.font]}`}>{props.children}</h1>\n    )\n  } else if (props.type === \"h2\") {\n    return (<h2 className={`${styles[props.font]}`}>{props.children}</h2>)\n  }\n  // switch (props.type) {\n  //   case \"h1\":\n  //     return <h1 className={`${styles[props.font]}`}>{props.children}</h1>;\n  //   case \"h2\":\n  //     return <h2 className={`${styles[props.font]}`}>{props.children}</h2>;\n  // }\n};\n\nexport default Heading;\n"]},"metadata":{},"sourceType":"module"}